diff --git a/Sources/Commands/SwiftTool.swift b/Sources/Commands/SwiftTool.swift
index 1386444..b1fa591 100644
--- a/Sources/Commands/SwiftTool.swift
+++ b/Sources/Commands/SwiftTool.swift
@@ -376,6 +376,11 @@ public class SwiftTool<Options: ToolOptions> {
             option: parser.add(option: "--enable-parseable-module-interfaces", kind: Bool.self),
             to: { $0.shouldEnableParseableModuleInterfaces = $1 })
 
+        binder.bind(
+            option: parser.add(option: "--numThreads", shortName: "-j", kind: Int.self,
+                usage: "Limit the number of parallel instances of the swift compiler (0 for unlimited)"),
+            to: { $0.numThreads = UInt32($1) })
+
         // Let subclasses bind arguments.
         type(of: self).defineArguments(parser: parser, binder: binder)
 
@@ -603,7 +608,7 @@ public class SwiftTool<Options: ToolOptions> {
         guard let llbuildTargetName = try computeLLBuildTargetName(for: subset, buildParameters: parameters) else {
             return
         }
-        try runLLBuild(manifest: parameters.llbuildManifest, llbuildTarget: llbuildTargetName)
+        try runLLBuild(manifest: parameters.llbuildManifest, llbuildTarget: llbuildTargetName, numThreads: parameters.numThreads)
     }
 
     /// Build a subset of products and targets using swift-build-tool.
@@ -619,7 +624,8 @@ public class SwiftTool<Options: ToolOptions> {
         try llbuild.generateManifest(at: yaml)
 
         // Run llbuild.
-        try runLLBuild(manifest: yaml, llbuildTarget: llbuildTargetName)
+        try runLLBuild(manifest: yaml, llbuildTarget: llbuildTargetName,
+		numThreads: plan.buildParameters.numThreads)
 
         // Create backwards-compatibilty symlink to old build path.
         let oldBuildPath = buildPath.appending(component: options.configuration.dirname)
@@ -629,17 +635,18 @@ public class SwiftTool<Options: ToolOptions> {
         try createSymlink(oldBuildPath, pointingAt: plan.buildParameters.buildPath, relative: true)
     }
 
-    func runLLBuild(manifest: AbsolutePath, llbuildTarget: String) throws {
+    func runLLBuild(manifest: AbsolutePath, llbuildTarget: String, numThreads: UInt32) throws {
         assert(localFileSystem.isFile(manifest), "llbuild manifest not present: \(manifest)")
         if options.shouldEnableLLBuildLibrary {
-            try runLLBuildAsLibrary(manifest: manifest, llbuildTarget: llbuildTarget)
+            try runLLBuildAsLibrary(manifest: manifest, llbuildTarget: llbuildTarget, numThreads: numThreads)
         } else {
-            try runLLBuildAsExecutable(manifest: manifest, llbuildTarget: llbuildTarget)
+            try runLLBuildAsExecutable(manifest: manifest, llbuildTarget: llbuildTarget, numThreads: numThreads)
         }
     }
 
-    func runLLBuildAsLibrary(manifest: AbsolutePath, llbuildTarget: String) throws {
+    func runLLBuildAsLibrary(manifest: AbsolutePath, llbuildTarget: String, numThreads: UInt32) throws {
         let databasePath = buildPath.appending(component: "build.db").pathString
+        BuildSystem.setSchedulerLaneWidth(width: numThreads)
         let buildSystem = BuildSystem(buildFile: manifest.pathString, databaseFile: databasePath, delegate: buildDelegate)
         buildDelegate.isVerbose = verbosity != .concise
         buildDelegate.onCommmandFailure = { [weak buildSystem] in buildSystem?.cancel() }
@@ -649,7 +656,7 @@ public class SwiftTool<Options: ToolOptions> {
         guard success else { throw Diagnostics.fatalError }
     }
 
-    func runLLBuildAsExecutable(manifest: AbsolutePath, llbuildTarget: String) throws {
+    func runLLBuildAsExecutable(manifest: AbsolutePath, llbuildTarget: String, numThreads: UInt32) throws {
         // Create a temporary directory for the build process.
         let tempDirName = "org.swift.swiftpm.\(NSUserName())"
         let tempDir = try determineTempDirectory().appending(component: tempDirName)
@@ -676,6 +683,9 @@ public class SwiftTool<Options: ToolOptions> {
         if verbosity != .concise {
             args.append("-v")
         }
+        if numThreads != 0 {
+            args.append("-j(\(numThreads))")
+        }
 
         // Create the environment for llbuild.
         var env = Process.env
@@ -722,7 +732,8 @@ public class SwiftTool<Options: ToolOptions> {
                 sanitizers: options.sanitizers,
                 enableCodeCoverage: options.shouldEnableCodeCoverage,
                 indexStoreMode: options.indexStoreMode,
-                enableParseableModuleInterfaces: options.shouldEnableParseableModuleInterfaces
+                enableParseableModuleInterfaces: options.shouldEnableParseableModuleInterfaces,
+                numThreads: options.numThreads
             )
         })
     }()
